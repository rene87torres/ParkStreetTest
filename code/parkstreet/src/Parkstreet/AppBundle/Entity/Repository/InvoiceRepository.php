<?php

namespace Parkstreet\AppBundle\Entity\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * InvoiceRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class InvoiceRepository extends EntityRepository
{
    /**
     * Retrieve the set of invoices filtered by interval of date/client/product
     * @param array $params
     * @return array
     */
    public function retrieveAll(array $params)
    {
        $query = $this->getEntityManager()->createQueryBuilder()
            ->select("i.id AS invoice_num,
                      i.date AS invoice_date,                      
                      p.id AS product_id,
                      p.description AS product_description,
                      li.id AS line_item_id,
                      li.qty,
                      li.price,
                      c.id AS client_id,
                      c.name AS client_name,
                      (SELECT SUM(dli.qty) FROM Parkstreet\AppBundle\Entity\InvoiceLineItems dli WHERE dli.invoice = i) AS total_qty,
                      (SELECT SUM(dili.price) FROM Parkstreet\AppBundle\Entity\InvoiceLineItems dili WHERE dili.invoice = i) AS total_price")
            ->distinct()
            ->from($this->getEntityName(), "i")
            ->innerJoin("i.invoiceLineItems", "li")
            ->innerJoin("li.product", "p")
            ->innerJoin("i.client", "c")
            ->orderBy("i.date", "DESC")
            ->setMaxResults($params['limit'])
            ->setFirstResult($params['offset']);
              
        //Total of all records (relation between invoice-product produce more quantity of records than the real quantity of invoices)       
        $queryTotal = $this->getEntityManager()->createQueryBuilder()
            ->select("COUNT(i.id) AS total")
            ->from($this->getEntityName(), "i")
            ->innerJoin("i.invoiceLineItems", "li")
            ->innerJoin("li.product", "p")
            //->innerJoin("i.client", "c")
            ->getQuery()
            ->getArrayResult();    

        return array('data' => $query->getQuery()->getArrayResult(), 'total' => $queryTotal[0]['total']);
    }
    
    /**
     * Retrieve the invoice filtered by id
     * @param array $params
     * @return array
     */
    public function retrieveById($id) {
        $this->getEntityManager()->createQueryBuilder()
            ->select("i.id AS invoice_num,
                      i.date AS invoice_date,
                      c.id AS client_id,
                      c.name AS client_name,
                      (SELECT SUM(dli.qty) FROM Parkstreet\AppBundle\Entity\InvoiceLineItems dli WHERE dli.invoice = i) AS total_qty,
                      (SELECT SUM(dili.price) FROM Parkstreet\AppBundle\Entity\InvoiceLineItems dili WHERE dili.invoice = i) AS total_price")        
            ->from($this->getEntityName(), "i")
            ->innerJoin("li.product", "p")
            ->innerJoin("i.client", "c")
            ->where('i.id = :id')
            ->setParameter('id', $id)
            ->getQuery()
            ->getArrayResult();             
    }
}
